第二篇

第5章 jsp基本语法
代码5.1中
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.*"%>
pageEncoding="UTF-8"必须和当前页面源文件的存储编码（在菜单edit-set encoding里设置）相同，两者不同的话eclipse也会提示。charset代表服务器端生成的页面以何种编码传递给客户端，客户端浏览器按这种编码去显示文本。pageEncoding和charset最好一致。
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">这一行才是真正对charset起作用，此时第一行的charset不起作用。为避免出现麻烦，建议把这几处都设置成一致。（书上的例子有的统一采用gbk，有的统一采用UTF-8，有的还不一致）
    常见的属性还有 session="true|false"（是否允许session,默认true）,buffer="none|xxkb"，autoFlush="true|false"
,isThreadSafe="true|false"(默认false，设置为true后这个页面不允许被多线程访问，即只能有一个用户执行，其他排队等待),isErrorPage="true|false",errorPage="指定页面"，isELignored="true|false"(是否忽略EL标签)

jsp文件会转为java文件，最终生成servlet，在eclipse调试,生成位置是F:\jeewebspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\5.01\org\apache\jsp。这里F:\jeewebspace是我的eclipse默认项目目录，5.01是项目名，其他目录结构是固定的。如果离开eclipse环境，在tomcat里直接被浏览器访问，则在apache-tomcat-7.0.92-windows-x64\apache-tomcat-7.0.92\work\Catalina\localhost\5.01\org\apache\jsp。

java在web服务器端最早使用的是servlet，servlet不方便做界面输出，jsp文件是后来出现的，jsp文件实质也是servlet,首次被访问时会编译成class文件，此后就不需要再次编译。

jsp文件中用的就是java语言，也可以在调试窗口输出异常信息。下例是部分代码
<%
try{
	int a=Integer.parseInt("2a");

	out.println(a);

}catch(Exception e)
{
	System.out.println("出现异常");
}
%>

也可以在web页面上输出异常信息
<%
try{
	int a=Integer.parseInt("2a");

	out.println(a);

}catch(Exception e)
{
	out.println("出现异常");
}
%>
这里的out对象是javax.servlet.jsp.JspWriter类，用于在页面上输出，和<%=today%>作用类似（today是某变量，输出到页面）

也可以在本页指明errorpage页，本页不需要try catch，然后在errorpage页输出异常<%=exception.getMessage()%>（被指定的errorpage页要把iserrorpage设置为true）,
上例在谷歌浏览器显示 For input string: "2a" ，IE需要在internet高级选项中启用友好错误提示,其他浏览器是否能用请自行设置测试。

代码5.2中
include指令可以在当前Jsp页面中包含另一个动态或静态页面，被包含进来的页面将和当前页面一起合成一个页面进行编译，最终生成一个class文件，因此各文件不能有冲突（比如设置不同的页面编码格式，使用同名变量，使用不宜重复的html标签，如<body><title>等）。
具体使用方法是想要嵌入另一页面的地方使用<%@ include file="页面文件名"%>，比如可以在主页面上画一个表格，然后在表格的不同位置引入其他页面。静态html页面用frame实现的多页面可以在jsp里用这种方法实现。
代码5.2如果eclipse自带浏览器显示有问题请使用google浏览器。注意 web.xml中如何定义默认页面。

taglib指令用来引用标签库，并指定前缀（理解为标签库的对象名）。

jsp中的脚本有3类
1）jsp表达式， 形如<%=变量名%>，直接嵌入在html里用作输出。
2）jsp脚本程序， 形如
<%
一段java语句;
%>
3）声明标识，形如
<%!
定义一些变量和方法
%>
注意在声明标识中定义的变量和方法是全局的（访问该网站的所有用户共享），2）里定义的是局部的。书上例5.14实现了一个页面访问次数的统计（该页面每被访问一次一个全局变量自加1，然后用jsp表达式输出该值）。这个例子存在一点问题，int count()前应加synchronized做同步。
每个jsp页面可看成最终生成一个class，然后多个用户（多线程）访问这个class，声明标识部分只执行一次，是全局的，其他是局部的。
新建一个jsp页面，加入如下代码，就是一个页面访问次数计数器。
<%!
	int number=0;
	synchronized int count(){
		number++;
		return number;
	}
%>
本页面自上次web服务器重启被累计访问<%=count()%>次


代码5.3会在页面上输出一个乘法表，注意html中的换行和空格。

jsp注释有多种方法
对于java代码部分可以用  //注销一行，用/*。。。*/注销多行
对于html部分或jsp表达式可以用<!-- 注销部分 -->或<%-- 注销部分 --%>,前者在浏览器里查看源码仍可以看到注销部分或jsp表达式的值，后者则在浏览器里查看源码也看不到。

动作标识

包含文件标识如代码5.5中<jsp:include page="top.jsp"/>，作用和前面的include指令相似，也是在当前页面里嵌入另一个页面，不同之处在于各个页面独立生成class后再组成一个页面，因此各页面在一定程度上使用不同设置及使用相同的变量名也不至引起冲突。可用<jsp:param ...>给被包含页面传递参数（具体用法见下文的请求转发标识）。

请求转发标识如代码5.6中<jsp:forward page="login.jsp"/>，
如果要给转发页面传递参数，同样可以用<jsp:param ...>传递参数，具体如下：
<jsp:forward page="login.jsp">
<jsp:param name="usr" value="aa"/>
<jsp:param name="pass" value="123"/>
</jsp:forward>
则相当于访问  login.jsp?usr=aa&pass=123，因此在login.jsp中可以用request.getParameter("usr")和request.getParameter("pass")获取传过来的参数值。request代表客户端浏览器的请求，详见下章jsp内置对象。
注意使用这种转发时浏览器上的url不会发生改变，使用fiddler抓包也只抓到转发后的包（实质上在这个例子里参数根本没通过客户端，转发也是服务器端直接转的，所以事实上客户端也只收到一个包，这种转发只是相当于参数是通过url参数传递的，转发其实并不经过客户端）

代码5.7除了输出日期和时间各个部分外，还包括如何获取url里的几个主要部分，如何设置响应的http头（如设置页面不缓存）。


第6章 jsp内置对象

1）request对象
request代表客户端浏览器的请求，在jsp里是内置对象，对应servlet里的javax.servlet.http.HttpServletRequest类型.


（书上所写的代码与压缩包里的代码在编码方式上有出入）
代码6.1中获取放在url里的参数，点击链接为<a href="deal.jsp?id=1&user=">处理页</a>。
url参数与页面文件名用？分隔，各参数间用&隔开，参数名与值用=隔开。
注意url里的参数值一般需要先进行url编码后再传输，例如当参数值里出现在url里有特殊意义的字符时，比如a=b&c=d,如果想表达的是a的值是“b&c=d”而不是传了a和b两个参数，就需要对b&c=d先进行url编码，传递过去后再进行url解码。只有大小写字母，数字，及-_'!~*.,不需要编码，其他都会被编码。英文方式编码方式为%xx，中文则为多个%xx（两个或三个，视把中文按gbk或utf-8而定），xx是十六进制ascii码，另外空格变+（注意空格如果是在url参数里是+，如果是在路径或文件名里出现要人工替换成%20，%20即空格的ascii码值）。java里有现成的方法来实现url编码和解码，不需要自己去编写编解码方法。
把第一页改成如下
<%@ page language="java" contentType="text/html; charset=GB18030" pageEncoding="GB18030"%>
<%@ page import="java.net.*" %>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GB18030">
<title>使用request对象获取请求参数值</title>
</head>
<body>
<%=URLEncoder.encode("1& 2") %>
<br>
<%=URLEncoder.encode("你好a") %>
<a href="deal.jsp?id=<%=URLEncoder.encode("1& 2") %>&user=<%=URLEncoder.encode("你好a") %>">处理页</a>
</body>
</html>
第二页如果不添加gbk解码操作，页面输出如下
id参数的值为：1& 2
user参数的值为：??o?a（乱码，不能正常显示中文）
pwd参数的值为：null
显然非中文部分不需要gbk解码也正确，中文部分不正确。把第二页修改成如下，则中英文都能正常显示
<%@ page language="java" contentType="text/html; charset=GB18030" pageEncoding="GB18030"%>
<%@ page import="java.net.*" %>
<%

//注意第二页接收到的URL参数或表单中参数会自动做 URLDecoder.decode(request.getParameter("参数"))，这里默认是"gbk"
//request.setCharacterEncoding("gbk");//注意这句只对post方式有效（对post的数据有效，对url里的参数值无效），在这句有效情况下，不需要再做下面的new String(参数.getBytes("iso-8859-1"),"gbk")，但这里不是post方式，这句不注销也无效。
String id=request.getParameter("id");	//获取id参数的值
String user=request.getParameter("user");//获取user参数的值
String pwd=request.getParameter("pwd");//获取pwd参数值



%>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GB18030">
<title>处理页</title>
</head>
<body>

id参数的值为：<%=new String(id.getBytes("iso-8859-1"),"gbk") %><br>
user参数的值为：<%=new String(user.getBytes("iso-8859-1"),"gbk") %><br>

</body>
</html>
即url中提交的参数值要先做url编码，接收页面除了自动做url解码外（这个只要发起提交的页面和接受提交的页面编码一致就会自动完成url解码，但如果不一致就不会自动解码，因此一个网站要有统一的编码方式，所有页面要统一选gbk或utf8其中一种，否则会引起一些想象不到的问题），还要对字符串重新按汉字编码格式进行解码才能正确获得中文（默认获取request里的参数时用的是iso-8859-1，因此要转格式；或者做request.setCharacterEncoding("gbk")，就不再需要后续转编码）。
对url参数值进行解码不支持参数为null，程序会报错，因此对不存在的参数不能进行url解码。
另外对url编码和解码还可以加上另一个参数如
编码时user=<%=URLEncoder.encode("你好a","gbk") %>，
解码使用String user=URLDecoder.decode(request.getParameter("user"),"gbk")（尽管这句这里不需要，但后面存取cookie时需要手动编码解码，因此解码也要会）;下页接收到的URL参数或表单中参数会自动做 URLDecoder.decode，这句在这里不需要有。这个方法也可以用"utf-8"解码，省略这个参数则是按gbk的编码形式作为中文编码的默认参数,用到url编解码编程时不要省略该参数避免出现问题。（url编码在gbk下时中文被编码成%xx%xx，在utf-8下被编码成%xx%xx%xx，怎样编码就要怎样解码。 ）

这个修改后的例子要仔细体会，再次总结一下：url中提交的参数值要先做url编码，接收页面除了自行完成url解码外，还要对字符串重新按汉字编码格式进行解码才能正确获得中文。url参数一般都是用户输入的值，针对特殊符号和中文，需要这样做才能保证不出问题。

上例是通过url地址来传递参数，更多是通过前页的表单把参数传递给第二页，把第一页改成如下：（表单部分可以用dreamweaver来做，然后粘贴过来）
<%@ page language="java" contentType="text/html; charset=GB18030" pageEncoding="GB18030"%>
<%@ page import="java.net.*" %>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GB18030">
<title>使用request对象获取请求参数值</title>
</head>
<body>
<form action="deal.jsp" method="get" enctype="application/x-www-form-urlencoded">
  
  id:<input name="id" type="text" />
  <br>
   user:<input name="user" type="text" />
  <input name="" type="submit" value="提交" />
</form>
</body>
</html>
在文本框里输入特殊字符和中文，可以看到使用表单（form）情况下，不需要人工对参数做url编码，get方式下也能在url地址栏里见到编码后的参数，因为表单里有enctype="application/x-www-form-urlencoded"（这个参数也可以省略，form里默认参数编码就是这个值，页面是gbk编码时会把表单里的值自动做gbk的url编码，页面是utf-8时自动做utf8的URL编码。除非是上传文件时才需要设置成multipart/form-data）。多数情况下表单里设置method="post"，这样参数通过request请求的数据部分进行提交，而不再通过其他人容易看到的浏览器url地址栏。

使用get方式提交表单，第二页也可以用上面的代码获取参数值。
使用post方式提交表单，则第二页有两种获取参数的方法，除了用上面代码获取参数值，还可以用如下代码
<%@ page language="java" contentType="text/html; charset=GB18030" pageEncoding="GB18030"%>
<%@ page import="java.net.*" %>
<%


request.setCharacterEncoding("gbk");  //post方式中可以用这句替代对每个带汉字的参数进行解码
String id=request.getParameter("id");	//获取id参数的值
String user=request.getParameter("user");//获取user参数的值
String pwd=request.getParameter("pwd");//获取pwd参数值



%>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GB18030">
<title>处理页</title>
</head>
<body>
<%=id%>
<%=user%>

</body>
</html>

使用get方式进行提交，用fiddler进行抓包可以看到先打开第一个页面，再向第二个页面提交，所发送的request和获取的response分别是:

发送：
GET http://localhost:7000/6.01/ HTTP/1.1
Host: localhost:7000
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9

得到
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Set-Cookie: JSESSIONID=6EBB227C0A747D06391E738BB4CB8313; Path=/6.01; HttpOnly
Content-Type: text/html;charset=GB18030
Content-Length: 359
Date: Sat, 26 Jan 2019 08:13:39 GMT



<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GB18030">
<title>使用request对象获取请求参数值</title>
</head>
<body>
<form action="deal.jsp" method="get">
  
  id:<input name="id" type="text" />
  <br>
   user:<input name="user" type="text" />
  <input name="" type="submit" value="提交" />
</form>
</body>



文本框里输入  1 &2 和 你好a，按提交按钮时发送
GET http://localhost:7000/6.01/deal.jsp?id=1+%262&user=%C4%E3%BA%C3a HTTP/1.1
Host: localhost:7000
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://localhost:7000/6.01/
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cookie: JSESSIONID=6EBB227C0A747D06391E738BB4CB8313

得到
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=GB18030
Content-Length: 200
Date: Sat, 26 Jan 2019 08:14:37 GMT




<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>处理页</title>
</head>
<body>
id参数的值为：1 &2<br>
user参数的值为：你好a<br>

</body>
</html>



form中的get改为post方式后，其他都基本不变，只是在按提交按钮后，发送的request变为
POST http://localhost:7000/6.01/deal.jsp HTTP/1.1
Host: localhost:7000
Connection: keep-alive
Content-Length: 28
Cache-Control: max-age=0
Origin: http://localhost:7000
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Referer: http://localhost:7000/6.01/
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cookie: JSESSIONID=6EBB227C0A747D06391E738BB4CB8313

id=1+%262&user=%C4%C7%C4%E3b

显然post方式里参数不再出现在url地址里，而是出现在request的数据里。
这里例子还涉及到了服务器通过响应头Set-Cookie给客户端设置cookie，以及session通过cookie中JSESSIONID使客户端和服务器端的session（通过sessionid）关联起来。在学完本章后要把这个例子从头分析一下。

书上代码6.2是关于把对象值保存起来的request.setAttribute(键名，对象)和把对象提取出来的request.getAttribute（键名），注意提取和保存只能在同一页面或者是有转发关系的页面间。(第二个页面是通过形如<jsp:forward page="deal.jsp"/>才能提取前页保存的内容，通过其他方式，如get,post,或链接进入第二页然后获取前页保存的值都会报错)。可以把这种转发的页面理解为服务器端同一页（客户端的url不改变，request和response也只有一次），因此可以共享这一保存起来的对象。这个例子里传递的是异常信息字符串，在转发页面间其他对象都是可以保存提取的，提取时一般要做对象的强制类型转换。

cookie对象
代码6.3是关于cookie的保存和提取的。
Cookie是保存在客户端浏览器或硬盘上的信息，在jsp里可以通过
Cookie[ ]  cookies = request.getCookies()获取全部cookies，
通过
Cookie cookie = new Cookie("Cookiename", "cookievalue");
cookie.setMaxAge(60*60*24*30);	//设置cookie有效期30天，不设置则不存储到硬盘
response.addCookie(cookie);
来添加。
cookie对象对应servlet里的javax.servlet.http.Cookie类型。cookie存在客户端，可以通过客户端javascript去设置和读取，在request中通过请求头发送给服务器端；服务器端也可以通过java代码对客户端的cookie进行获取和设置（请求头里把cookie信息发送到了服务器端，所以服务器端可以读取；服务器端通过响应头里的setcookie就可以把设置的值传回客户端浏览器）

cookie里存的是键值对，只能保存字符串类型的值，jsp中规定中文不能保存到cookies,一般要求保存和提取时要做url编码和解码。代码6.3中演示了如何获取指定名称的cookie值（Jsp中只能通过遍历来获取），当没有保存这个键名的cookie时显示一个只有一个文本框的登录界面，提交到下页去创建该cookie；当有这个键名的cookie时，则提取出来显示。这个例子里保存的是用户名和上次登录时间，中间用#分隔。
cookie.setMaxAge(60*60*24*30)设置的是cookie过期时间，以秒为单位。如果不设过期时间，则该cookie的值保存在浏览器内存里，关闭该浏览器则cookie也丢失。如果设置过期时间，则该cookie的值及过期时间这些内容都以文件形式保存在硬盘上（如IE选项-常规-设置里可以找到cookie所在目录，不能勾选退出时删除浏览历史记录否则关闭浏览器时cookie会被清除，一个站点的cookies存在一个以站点名命名的文件里），即使关机下次再用同一浏览器打开同一站点仍能从文件里恢复cookie值，常见的登录某论坛多长时间内免登录功能就是通过设置cookie过期时间实现的。具体实现方法可以把用户名和密码（一般是加密后的）保存在cookie里并设置过期时间，如果某次访问该站点提取到该cookie则直接用里面的信息进行登录，如果提取不到则显示登录界面登录。不同浏览器一般不共享cookies，因此针对一个web论坛，可以用不同帐号使用不同浏览器同时登录。
代码6.3是关于cookie的保存和提取的，需要认真体会掌握。各种搜索、浏览留下的痕迹都是因为保留了cookie。一个站点留下的cookie只有来自该站点的页面才能访问，除非该站点把读取到的cookie信息又传递给了其他站点（比如在其他网站经常能看到你曾经在百度上搜索的内容，就是因为其他网站的页面里嵌入了某个百度页面（在不可见的frame里），这个百度页面可以把读取到的搜索信息转给该网站，所以这个网站就可以向用户精准推送一些广告）
代码6.3第二页里<script type="text/javascript">window.location.href="index.jsp"</script>
这一行使该页在保存了cookie信息后又重新跳转回了第一页，这种JS跳转方式也会常常用到。

用户输入的用户名有可能是中文，因此存入cookies前要做url编码，从cookies取出要做url解码。页面编码都是utf8编码，因此url编解码要把汉字按utf8来处理。
代码6.3有个错误导致显示中文用户名出现乱码，即url编码时指定了utf8参数，从cookie里取出后解码却省略了utf8参数，导致中文乱码，只要把index.jsp里该行加上utf-8参数，即user = URLDecoder.decode(cookies[i].getValue().split("#")[0],"utf-8"); 就可以解决这个问题。（书上没加这个参数，中文乱码）
注意deal.jsp中request.setCharacterEncoding("utf-8");这行是不能省略的，否则获取前页post过来的参数就不是正确的中文utf8编码了，需要随后人工做utf-8重新编码。

总结一下：
1）做网站时，所有页面要采用同种编码（charset,pageencoding都要有，并且要一致）。
2）提交表单数据时，url编解码一般会自动完成，不用出现在代码里。get提交方式下request.setCharacterEncoding无效（只对Post数据有效），需要人工对获取到的参数重新编码；post提交方式下这种处理方法仍然可用；也可以做request.setCharacterEncoding，这时就不需要再去重新编码。
3）cookies的存取因为不允许存储中文则需要做url编解码。
4）web页面显示中文时，因为page开头设置了pageEncoding=utf-8(也可能是gbk)，就不需要再去做response.setCharacterEncoding(后者本身使用上也有局限性不如前者所做的页面设置适应性广，建议不使用后种方法)
中文乱码问题可以参看另一本pdf书《jsp+servlet+tomcat应用开发从零开始学》第三章中文乱码的处理部分。


代码6.4演示了前面提到过的url传递中文参数如何解码，URL里的参数在传递时也可以不做url编码，因为浏览器会自动做（地址栏里的参数无论直接是中文还是经过编码后的字串，网络传递的都是经过编码的字串，用fiddler抓包可以证实这点，但未防止个别浏览器及某些设置下出现问题，在url里直接传递的参数还是建议主动做url编码）。6.4里的接收页面不需要做url解码，对收到的参数重新做汉字编码，就可以正确显示中文；不做重新编码就是乱码。

代码6.5演示了request对象常用的一些方法。如：request.getRequestURI()返回当前页的路径信息；request.getRequestURL()返回当前页的完整url；request.getServletPath()返回当前页的文件名；request.getRealPath("index.jsp")返回文件在服务器上的完整物理路径（如果是/作为参数则返回的是服务器端应用程序的物理路径）等等。

书上例子6.8是用request.getLocal()获取请求头里的Accept-Language信息（如前文用fiddler抓包时获取到Accept-Language: zh-CN,zh;q=0.9），这个信息是关于客户端用户所使用的语言，读取这条信息后就可以依据访问用户的语言返回不同的内容。


response对象 
代码6.6是关于重定向网页的，使用 java代码，形如：<%response.sendRedirect("login.jsp"); %>，这条语句之后的代码将得不到执行。和这条语句类似的还有前面学过的JS跳转代码
<script type="text/javascript">window.location.href="index.jsp"</script>，但后者会执行完本页代码再跳转。

response对象对应javax.servlet.http.HttpServletResponse类型，在servlet的doGet和doPost方法里可直接从其参数response里获取。

书上例6.11-6.13演示了，用java代码实现的设置响应头和页面的定时跳转。

响应头可以在html里用meta设置，也可以用response.setHeader

页面定时跳转可以用书上的response.setHeader方法，也可以用Html来实现：
页面自动刷新：把如下代码加入＜head>区域中
<meta http-equiv="refresh" content="20">,其中20指每隔20秒刷新一次页面.
页面自动跳转：把如下代码加入＜head>区域中
<meta http-equiv="refresh" content="20;url=http://www.hackhome.com">,其中20指隔20秒后跳转到http://www.hackhome.com页面
跳转也可以用response.sendRedirect(url);

session对象
前面学习的cookies是浏览器或客户硬盘里存储的一些信息，客户端Js和服务器端jsp都能访问和设置其中的内容。
session则是存储在服务器内存里，是客户端在服务器的内存里对应一片session区域，依靠cookies里的JSESSIONID可以在服务器端找到自己能访问到的区域（cookies里JSESSIONID的值是由服务器通过Set-Cookie响应头赋值，然后每次通过请求头传递给服务器来代表客户身份，从而可以访问服务器端存储的关于自己的信息）
jsp中的内部对象session对应的serlvlet中的javax.servlet.http.HttpSession类，servlet里可以用request.getSession()来获取，sessionid在jsp中可以用session.getId()获取。

代码6.7演示的是如何在一个页面把一个对象保存到session里，然后在另一个页面取出来。
保存session.setAttribute("name",name);
提取String name = (String)session.getAttribute("name");
前面学过使用request.setAttribute和request.getAttribute存取对象，但只在转发的页面间有效。而使用session存取值则只要session未过期，那么在站点中某个页面存取的对象，同站点所有页面都可以获取出来。删除某对象和销毁有session.removeAttribute和session.invalidate()方法，设置session过期时间有session.setMaxInactiveInterval(arg0)。
注意代码7.6里在获取post参数时并没有request.setCharacterEncoding("gbk");也没有对其重新编码，却仍然可以正常显示中文。这个疑问可以在web.xml里找到答案，web.xml里定义了一个过滤servlet，在相应目录中也有对应的class文件，这个过滤servlet就是起到处理中文的作用。后面servlet部分会有详细介绍。
session可以用来判断用户是否登录。用户名密码正确，则在登录页创建一个session用来保存用户名，进入其他页面时只要检查该session是否null即可，null则表示未登录，不为null则可以从中提取出用户名，从而在页面中显示出该用户应该看到的内容。如果长时间没有访问该网站页面的操作就会使session过期，就又成了未登录状态。


application对象

与request,session对象用法类似，session可看作是一个客户端的全局变量，但application对象是整个网站所有客户端的全局对象，一个用户做application.setAttribute("name",obj); 则所有用户都可以把这个值取出来(假设obj是String类型)：String name = (String)application.getAttribute("name");
application对象对应servlet里的类是javax.servlet.ServletContext,可以用request.getServletContext()或request.getSession().getServletContext()来获取，前者只支持servlet3.0，所以从兼容性角度一般使用后者的多一些。application.getRealPath(String)方法可以获取指定文件在服务器端的路径（包括盘符、路径、文件名）。

见书上6.5节例子，application.getInitParameter(String name)可以读取出web.xml配置文件里定义的一些参数值。比如把数据库的连接串定义在这里，这样更换其他数据库时只要改这里的配置即可，不需要去改动源程序。
application同样有getAttribute和setAttribute方法，可以在这里存某页面访问次数，读取该值为null时就可以赋值为1，读取该值不为Null时就可以加1再存进去。这种做法类似前面java声明标识部分所提及到的定义全局变量，做加1操作也要放在同步方法里。
application对象里也一样可以存储各种对象，比如做个聊天室，就可以把在线用户列表存在这里，这样每个人都可以读出这个列表（List）
	

out对象
out对象用于向页面输出，如out.print（“xxx”）和out.println（“xxx”），(println换行在网页里不起作用，除非放到 <pre>和</pre>标签间输出),out对象对应javax.servlet.jsp.JspWriter类，最后被转化为java.io.PrintWriter类型。在servlet的doGet和doPost方法里可以用java.io.PrintWriter out=response.getWriter()来获取。


在jsp中，除了request,response,session,application,out等内部对象可以直接使用外（cookie不能直接用，要用request获取，response添加），还可以直接使用page,config,exception(在错误处理页面中),pageContext等内部对象。

config对象提供方法用于读取xml中配置参数。config.getInitParameter("参数名")可获取xml里定义的内容。

pageContext提供方法用于读取前面提到的内部对象，servlet中获取pageContext对象的方法如下：
javax.servlet.jsp.PageContext pageContext =javax.servlet.jsp.JspFactory.getDefaultFactory().getPageContext(this, request, response, null, true, 8192, true);
有了pageContext对象，在servlet中也可以通过它获取其他内部对象。pageContext提供了一个页面转发方法pageContext.forward(url)。


以上内部对象在jsp编程中会被大量使用，需要理解并熟练掌握；另外这些内部对象在servlet中对应何种类型及如何获取也需要掌握，在servlet章节中也要被大量使用。

代码6.9演示了把异常显示在指定错误页的用法。

代码6.10在用户名密码正确时跳转到某页，错误时跳转到另一页。这个例子意义不大，可以修改成登录成功时设置一个session存用户名，其他需要登录才有权查看的页面检测这个session，存在该session则显示该用户名及该页面内容，不存在该session则跳转到登录页。这个例子里用了两种跳转方法，一种通过输出客户端js，一种用response内部对象。跳转还可以设定跳转时间，如本例中error.jsp中，response.setHeader("refresh","30;URL=index.jsp");。

代码6.11把每次提交的数据存到session中，实际上应该存到application中，session里信息只能被用户本人获取，application里的信息才能被所有人获取。

代码6.12压缩包里没有，把6.11里的session换成application也就是6.12的代码了。
